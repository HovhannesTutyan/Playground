1. 
SELECT 
    lastname,
    firstname
FROM    
    employees
ORDER BY
    lastname DESC
+-----------------+------------------+
lastname          |firstname         |
+-----------------+------------------+
| Young           | Dorothy          |
| Young           | Jeff             |
| Young           | Julie            |
| Yoshido         | Juri             |
| Walker          | Brydey           |
| Victorino       | Wendy            |
| Urs             | Braun            |

1.1
SELECT 
    orderNumber,
    orderLineNumber,
    quantityOrdered * priceEach AS subtotal
FROM
    orderdetails
ORDER BY subtotal DESC;
+-------------+-----------------+----------+
| orderNumber | orderLineNumber | subtotal |
+-------------+-----------------+----------+
|       10403 |               9 | 11503.14 |
|       10405 |               5 | 11170.52 |
|       10407 |               2 | 10723.60 |
|       10404 |               3 | 10460.16 |
|       10312 |               3 | 10286.40 |
|       10424 |               6 | 10072.00 |
|       10348 |               8 |  9974.40 |

2. WHERE
SELECT 
    lastname, 
    firstname, 
    jobtitle,
    officeCode
FROM
    employees
-WHERE
    jobtitle = 'Sales Rep';
-WHERE
    jobtitle = 'Sales Rep' AND 
    officeCode = 1;
-WHERE
    officeCode BETWEEN 1 AND 3
-WHERE
    lastName LIKE '%son'
-WHERE
    officeCode IN (1 , 2, 3)
-WHERE
    reportsTo IS NULL;
-WHERE
    jobtitle <> 'Sales Rep';
+-----------+-----------+--------------------+------------+
| lastName  | firstName | jobTitle           | officeCode |
+-----------+-----------+--------------------+------------+
| Murphy    | Diane     | President          | 1          |
| Bow       | Anthony   | Sales Manager (NA) | 1          |
| Jennings  | Leslie    | Sales Rep          | 1          |
| Thompson  | Leslie    | Sales Rep          | 1          |
| Firrelli  | Jeff      | VP Marketing       | 1          |
| Patterson | Mary      | VP Sales           | 1          |
| Firrelli  | Julie     | Sales Rep          | 2          |
| Patterson | Steve     | Sales Rep          | 2          |
| Tseng     | Foon Yue  | Sales Rep          | 3          |
| Vanauf    | George    | Sales Rep          | 3          |
| Bondur    | Loui      | Sales Rep          | 4          |
| Hernandez | Gerard    | Sales Rep          | 4          |
| Castillo  | Pamela    | Sales Rep          | 4          |
| Gerard    | Martin    | Sales Rep          | 4          |
| Nishi     | Mami      | Sales Rep          | 5          |
+-----------+-----------+--------------------+------------+

3. DISTINCT
SELECT DISTINCT
    state, city
FROM
    customers
WHERE
    state IS NOT NULL
ORDER BY 
    state, 
    city;
+---------------+----------------+
| state         | city           |
+---------------+----------------+
| BC            | Tsawassen      |
| BC            | Vancouver      |
| CA            | Brisbane       |
| CA            | Burbank        |
| CA            | Burlingame     |
| CA            | Glendale       |
| CA            | Los Angeles    |
| CA            | Pasadena       |
| CA            | San Diego      |
without DISTINCT
+---------------+----------------+
| state         | city           |
+---------------+----------------+
| BC            | Tsawassen      |
| BC            | Vancouver      |
| CA            | Brisbane       |
| CA            | Burbank        |
..
| CA            | San Francisco  |
| CA            | San Francisco  |
...
| MA            | Boston         |
| MA            | Boston         |
| MA            | Brickhaven     |
| MA            | Brickhaven     |
| MA            | Brickhaven     |
...
| NY            | NYC            |
| NY            | NYC            |
| NY            | NYC            |
| NY            | NYC            |
| NY            | NYC            |

4. INNER JOIN
SELECT 
    t1.orderNumber,
    t1.status,
    SUM(quantityOrdered * priceEach) total
FROM
    orders t1
INNER JOIN orderdetails t2 
    ON t1.orderNumber = t2.orderNumber
GROUP BY orderNumber;

4.1 USING
SELECT 
    orderNumber,
    status,
    SUM(quantityOrdered * priceEach) total
FROM
    orders
INNER JOIN orderdetails USING (orderNumber)
GROUP BY orderNumber;

+----------------+
|   orderdetails |
+----------------+
| *orderNumber   |
| *productCode   | 
| quantityOrdered|
| priceEach      |
| orderLineNumber|
+----------------+

+----------------+
|   orders       |
+----------------+
| *orderNumber   |
| orderDate      |
| requiredDate   |
| shippedDate    |
| status         |
| commments      |
| customeNumber  |
+----------------+

+----------------++----------------++----------------+
|   orderNumber  |status            |total           |
+----------------++----------------++----------------+
| 10100          |Shipped           | 10223.83       |
| 10101          |Shipped           | 10549.01       |
| 10102          |Shipped           | 5494.78        |
| 10103          |Shipped           | 50218.95       |
| 10104          |Shipped           | 40206.20       |   
+----------------++----------------++----------------+

4.2 
SELECT 
    orderNumber,
    orderDate,
    customerName,
    orderLineNumber,
    productName,
    quantityOrdered,
    priceEach
FROM
    orders
INNER JOIN orderdetails 
    USING (orderNumber)
INNER JOIN products 
    USING (productCode)
INNER JOIN customers 
    USING (customerNumber)
ORDER BY 
    orderNumber, 
    orderLineNumber;

5. LEFT JOIN
SELECT 
    lastName, 
    firstName, 
    customerName, 
    checkNumber, 
    amount
FROM
    employees
LEFT JOIN customers ON 
    employeeNumber = salesRepEmployeeNumber
LEFT JOIN payments ON 
    payments.customerNumber = customers.customerNumber
ORDER BY 
    customerName, 
    checkNumber;

6. RIGHT JOIN
SELECT 
    employeeNumber, 
    customerNumber
FROM
    customers
RIGHT JOIN employees ON 
	salesRepEmployeeNumber = employeeNumber
WHERE customerNumber is NULL
ORDER BY employeeNumber;

7. self JOIN
SELECT 
    CONCAT(m.lastName, ', ', m.firstName) AS Manager,
    CONCAT(e.lastName, ', ', e.firstName) AS 'Direct report'
FROM
    employees e
INNER JOIN employees m ON 
    m.employeeNumber = e.reportsTo
ORDER BY 
    Manager;

8. HAVING
SELECT 
    ordernumber,
    SUM(quantityOrdered) AS itemsCount,
    SUM(priceeach*quantityOrdered) AS total
FROM
    orderdetails
GROUP BY 
   ordernumber
HAVING 
   total > 1000;


8. example
SELECT customer_id, COUNT(order_id) as total_orders, SUM(order_amount) as total_spent  // This works after HAVING
FROM customers
JOIN orders
ON customers.id = orders.customer_id
WHERE ORDER_DATE >= '2023-01-01'
GROUP BY customer_id
HAVING total_spent >= 100
ORDER BY total_spent DESC
LIMIT 10;

SARGABLE - Search Argument Able
Bad:    SELECT ... WHERE Year(myDate) = 2008                                    // Non Sargable query, YEAR function is applied to every row in the table
Fixed:  SELECT ... WHERE myDate >= '01-01-2008' AND myDate < '01-01-2009'       // Sargable query, DB engine uses index on orderdate column to filter records

Bad:    SELECT ... WHERE SUBSTRING(DealerName, 4) = 'Ford'
Fixed:  SELECT ... WHERE DealerName Like 'Ford%'

Bad:    SELECT ... WHERE DateDiff(mm, OrderDate, GetDate()) >= 30
Fixed:  SELECT ... Where OrderDate < DateAdd(mm, -30, GetDate())
To write sargable queries:
- Avoid using functions or calculations on indexed columns in the WHERE clause
- Use direct comparisions when possible, instead of wrapping the column in a function
